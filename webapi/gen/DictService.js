//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./dict_types');
//HELPER FUNCTIONS AND STRUCTURES

DictService_getProvinceList_args = function(args) {
};
DictService_getProvinceList_args.prototype = {};
DictService_getProvinceList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getProvinceList_args.prototype.write = function(output) {
  output.writeStructBegin('DictService_getProvinceList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getProvinceList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
DictService_getProvinceList_result.prototype = {};
DictService_getProvinceList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getProvinceList_result.prototype.write = function(output) {
  output.writeStructBegin('DictService_getProvinceList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getCityList_args = function(args) {
};
DictService_getCityList_args.prototype = {};
DictService_getCityList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getCityList_args.prototype.write = function(output) {
  output.writeStructBegin('DictService_getCityList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getCityList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
DictService_getCityList_result.prototype = {};
DictService_getCityList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getCityList_result.prototype.write = function(output) {
  output.writeStructBegin('DictService_getCityList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getCityListByIds_args = function(args) {
  this.ids = null;
  if (args) {
    if (args.ids !== undefined) {
      this.ids = args.ids;
    }
  }
};
DictService_getCityListByIds_args.prototype = {};
DictService_getCityListByIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.ids = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32();
          this.ids.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getCityListByIds_args.prototype.write = function(output) {
  output.writeStructBegin('DictService_getCityListByIds_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.ids.length);
    for (var iter7 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter7))
      {
        iter7 = this.ids[iter7];
        output.writeI32(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getCityListByIds_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
DictService_getCityListByIds_result.prototype = {};
DictService_getCityListByIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getCityListByIds_result.prototype.write = function(output) {
  output.writeStructBegin('DictService_getCityListByIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getSchoolListByIds_args = function(args) {
  this.ids = null;
  if (args) {
    if (args.ids !== undefined) {
      this.ids = args.ids;
    }
  }
};
DictService_getSchoolListByIds_args.prototype = {};
DictService_getSchoolListByIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.ids = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readI32();
          this.ids.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getSchoolListByIds_args.prototype.write = function(output) {
  output.writeStructBegin('DictService_getSchoolListByIds_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.ids.length);
    for (var iter15 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter15))
      {
        iter15 = this.ids[iter15];
        output.writeI32(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getSchoolListByIds_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
DictService_getSchoolListByIds_result.prototype = {};
DictService_getSchoolListByIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getSchoolListByIds_result.prototype.write = function(output) {
  output.writeStructBegin('DictService_getSchoolListByIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getSchoolListByProvId_args = function(args) {
  this.provId = null;
  if (args) {
    if (args.provId !== undefined) {
      this.provId = args.provId;
    }
  }
};
DictService_getSchoolListByProvId_args.prototype = {};
DictService_getSchoolListByProvId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.provId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getSchoolListByProvId_args.prototype.write = function(output) {
  output.writeStructBegin('DictService_getSchoolListByProvId_args');
  if (this.provId !== null && this.provId !== undefined) {
    output.writeFieldBegin('provId', Thrift.Type.I64, 1);
    output.writeI64(this.provId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getSchoolListByProvId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
DictService_getSchoolListByProvId_result.prototype = {};
DictService_getSchoolListByProvId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getSchoolListByProvId_result.prototype.write = function(output) {
  output.writeStructBegin('DictService_getSchoolListByProvId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getGradeList_args = function(args) {
};
DictService_getGradeList_args.prototype = {};
DictService_getGradeList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getGradeList_args.prototype.write = function(output) {
  output.writeStructBegin('DictService_getGradeList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getGradeList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
DictService_getGradeList_result.prototype = {};
DictService_getGradeList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getGradeList_result.prototype.write = function(output) {
  output.writeStructBegin('DictService_getGradeList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getSubjectList_args = function(args) {
};
DictService_getSubjectList_args.prototype = {};
DictService_getSubjectList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getSubjectList_args.prototype.write = function(output) {
  output.writeStructBegin('DictService_getSubjectList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getSubjectList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
DictService_getSubjectList_result.prototype = {};
DictService_getSubjectList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getSubjectList_result.prototype.write = function(output) {
  output.writeStructBegin('DictService_getSubjectList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getSubjectListByGrade_args = function(args) {
  this.gradeId = null;
  if (args) {
    if (args.gradeId !== undefined) {
      this.gradeId = args.gradeId;
    }
  }
};
DictService_getSubjectListByGrade_args.prototype = {};
DictService_getSubjectListByGrade_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.gradeId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getSubjectListByGrade_args.prototype.write = function(output) {
  output.writeStructBegin('DictService_getSubjectListByGrade_args');
  if (this.gradeId !== null && this.gradeId !== undefined) {
    output.writeFieldBegin('gradeId', Thrift.Type.I64, 1);
    output.writeI64(this.gradeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getSubjectListByGrade_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
DictService_getSubjectListByGrade_result.prototype = {};
DictService_getSubjectListByGrade_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getSubjectListByGrade_result.prototype.write = function(output) {
  output.writeStructBegin('DictService_getSubjectListByGrade_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getGradeSubjectList_args = function(args) {
};
DictService_getGradeSubjectList_args.prototype = {};
DictService_getGradeSubjectList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getGradeSubjectList_args.prototype.write = function(output) {
  output.writeStructBegin('DictService_getGradeSubjectList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getGradeSubjectList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
DictService_getGradeSubjectList_result.prototype = {};
DictService_getGradeSubjectList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getGradeSubjectList_result.prototype.write = function(output) {
  output.writeStructBegin('DictService_getGradeSubjectList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getCityById_args = function(args) {
  this.cityId = null;
  if (args) {
    if (args.cityId !== undefined) {
      this.cityId = args.cityId;
    }
  }
};
DictService_getCityById_args.prototype = {};
DictService_getCityById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.cityId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getCityById_args.prototype.write = function(output) {
  output.writeStructBegin('DictService_getCityById_args');
  if (this.cityId !== null && this.cityId !== undefined) {
    output.writeFieldBegin('cityId', Thrift.Type.I64, 1);
    output.writeI64(this.cityId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getCityById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
DictService_getCityById_result.prototype = {};
DictService_getCityById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getCityById_result.prototype.write = function(output) {
  output.writeStructBegin('DictService_getCityById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getGradeById_args = function(args) {
  this.gradeId = null;
  if (args) {
    if (args.gradeId !== undefined) {
      this.gradeId = args.gradeId;
    }
  }
};
DictService_getGradeById_args.prototype = {};
DictService_getGradeById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.gradeId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getGradeById_args.prototype.write = function(output) {
  output.writeStructBegin('DictService_getGradeById_args');
  if (this.gradeId !== null && this.gradeId !== undefined) {
    output.writeFieldBegin('gradeId', Thrift.Type.I64, 1);
    output.writeI64(this.gradeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getGradeById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
DictService_getGradeById_result.prototype = {};
DictService_getGradeById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getGradeById_result.prototype.write = function(output) {
  output.writeStructBegin('DictService_getGradeById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getSubjectById_args = function(args) {
  this.subjectId = null;
  if (args) {
    if (args.subjectId !== undefined) {
      this.subjectId = args.subjectId;
    }
  }
};
DictService_getSubjectById_args.prototype = {};
DictService_getSubjectById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.subjectId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getSubjectById_args.prototype.write = function(output) {
  output.writeStructBegin('DictService_getSubjectById_args');
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.I64, 1);
    output.writeI64(this.subjectId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getSubjectById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
DictService_getSubjectById_result.prototype = {};
DictService_getSubjectById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getSubjectById_result.prototype.write = function(output) {
  output.writeStructBegin('DictService_getSubjectById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getSchoolById_args = function(args) {
  this.schoolId = null;
  if (args) {
    if (args.schoolId !== undefined) {
      this.schoolId = args.schoolId;
    }
  }
};
DictService_getSchoolById_args.prototype = {};
DictService_getSchoolById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.schoolId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getSchoolById_args.prototype.write = function(output) {
  output.writeStructBegin('DictService_getSchoolById_args');
  if (this.schoolId !== null && this.schoolId !== undefined) {
    output.writeFieldBegin('schoolId', Thrift.Type.I64, 1);
    output.writeI64(this.schoolId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getSchoolById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
DictService_getSchoolById_result.prototype = {};
DictService_getSchoolById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getSchoolById_result.prototype.write = function(output) {
  output.writeStructBegin('DictService_getSchoolById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getSubjectNamesByIds_args = function(args) {
  this.ids = null;
  if (args) {
    if (args.ids !== undefined) {
      this.ids = args.ids;
    }
  }
};
DictService_getSubjectNamesByIds_args.prototype = {};
DictService_getSubjectNamesByIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.ids = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readI32();
          this.ids.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getSubjectNamesByIds_args.prototype.write = function(output) {
  output.writeStructBegin('DictService_getSubjectNamesByIds_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.ids.length);
    for (var iter23 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter23))
      {
        iter23 = this.ids[iter23];
        output.writeI32(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getSubjectNamesByIds_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
DictService_getSubjectNamesByIds_result.prototype = {};
DictService_getSubjectNamesByIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getSubjectNamesByIds_result.prototype.write = function(output) {
  output.writeStructBegin('DictService_getSubjectNamesByIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getGradeNamesByIds_args = function(args) {
  this.ids = null;
  if (args) {
    if (args.ids !== undefined) {
      this.ids = args.ids;
    }
  }
};
DictService_getGradeNamesByIds_args.prototype = {};
DictService_getGradeNamesByIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.ids = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readI32();
          this.ids.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getGradeNamesByIds_args.prototype.write = function(output) {
  output.writeStructBegin('DictService_getGradeNamesByIds_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.ids.length);
    for (var iter31 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter31))
      {
        iter31 = this.ids[iter31];
        output.writeI32(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getGradeNamesByIds_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
DictService_getGradeNamesByIds_result.prototype = {};
DictService_getGradeNamesByIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getGradeNamesByIds_result.prototype.write = function(output) {
  output.writeStructBegin('DictService_getGradeNamesByIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getCitySchoolMap_args = function(args) {
};
DictService_getCitySchoolMap_args.prototype = {};
DictService_getCitySchoolMap_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getCitySchoolMap_args.prototype.write = function(output) {
  output.writeStructBegin('DictService_getCitySchoolMap_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictService_getCitySchoolMap_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
DictService_getCitySchoolMap_result.prototype = {};
DictService_getCitySchoolMap_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictService_getCitySchoolMap_result.prototype.write = function(output) {
  output.writeStructBegin('DictService_getCitySchoolMap_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DictServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
DictServiceClient.prototype = {};
DictServiceClient.prototype.seqid = function() { return this._seqid; }
DictServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
DictServiceClient.prototype.getProvinceList = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProvinceList();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProvinceList();
  }
};

DictServiceClient.prototype.send_getProvinceList = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProvinceList', Thrift.MessageType.CALL, this.seqid());
  var args = new DictService_getProvinceList_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DictServiceClient.prototype.recv_getProvinceList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DictService_getProvinceList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProvinceList failed: unknown result');
};
DictServiceClient.prototype.getCityList = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCityList();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCityList();
  }
};

DictServiceClient.prototype.send_getCityList = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCityList', Thrift.MessageType.CALL, this.seqid());
  var args = new DictService_getCityList_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DictServiceClient.prototype.recv_getCityList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DictService_getCityList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCityList failed: unknown result');
};
DictServiceClient.prototype.getCityListByIds = function(ids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCityListByIds(ids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCityListByIds(ids);
  }
};

DictServiceClient.prototype.send_getCityListByIds = function(ids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCityListByIds', Thrift.MessageType.CALL, this.seqid());
  var args = new DictService_getCityListByIds_args();
  args.ids = ids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DictServiceClient.prototype.recv_getCityListByIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DictService_getCityListByIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCityListByIds failed: unknown result');
};
DictServiceClient.prototype.getSchoolListByIds = function(ids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSchoolListByIds(ids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSchoolListByIds(ids);
  }
};

DictServiceClient.prototype.send_getSchoolListByIds = function(ids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSchoolListByIds', Thrift.MessageType.CALL, this.seqid());
  var args = new DictService_getSchoolListByIds_args();
  args.ids = ids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DictServiceClient.prototype.recv_getSchoolListByIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DictService_getSchoolListByIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSchoolListByIds failed: unknown result');
};
DictServiceClient.prototype.getSchoolListByProvId = function(provId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSchoolListByProvId(provId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSchoolListByProvId(provId);
  }
};

DictServiceClient.prototype.send_getSchoolListByProvId = function(provId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSchoolListByProvId', Thrift.MessageType.CALL, this.seqid());
  var args = new DictService_getSchoolListByProvId_args();
  args.provId = provId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DictServiceClient.prototype.recv_getSchoolListByProvId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DictService_getSchoolListByProvId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSchoolListByProvId failed: unknown result');
};
DictServiceClient.prototype.getGradeList = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGradeList();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGradeList();
  }
};

DictServiceClient.prototype.send_getGradeList = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGradeList', Thrift.MessageType.CALL, this.seqid());
  var args = new DictService_getGradeList_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DictServiceClient.prototype.recv_getGradeList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DictService_getGradeList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGradeList failed: unknown result');
};
DictServiceClient.prototype.getSubjectList = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSubjectList();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSubjectList();
  }
};

DictServiceClient.prototype.send_getSubjectList = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSubjectList', Thrift.MessageType.CALL, this.seqid());
  var args = new DictService_getSubjectList_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DictServiceClient.prototype.recv_getSubjectList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DictService_getSubjectList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSubjectList failed: unknown result');
};
DictServiceClient.prototype.getSubjectListByGrade = function(gradeId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSubjectListByGrade(gradeId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSubjectListByGrade(gradeId);
  }
};

DictServiceClient.prototype.send_getSubjectListByGrade = function(gradeId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSubjectListByGrade', Thrift.MessageType.CALL, this.seqid());
  var args = new DictService_getSubjectListByGrade_args();
  args.gradeId = gradeId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DictServiceClient.prototype.recv_getSubjectListByGrade = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DictService_getSubjectListByGrade_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSubjectListByGrade failed: unknown result');
};
DictServiceClient.prototype.getGradeSubjectList = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGradeSubjectList();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGradeSubjectList();
  }
};

DictServiceClient.prototype.send_getGradeSubjectList = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGradeSubjectList', Thrift.MessageType.CALL, this.seqid());
  var args = new DictService_getGradeSubjectList_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DictServiceClient.prototype.recv_getGradeSubjectList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DictService_getGradeSubjectList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGradeSubjectList failed: unknown result');
};
DictServiceClient.prototype.getCityById = function(cityId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCityById(cityId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCityById(cityId);
  }
};

DictServiceClient.prototype.send_getCityById = function(cityId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCityById', Thrift.MessageType.CALL, this.seqid());
  var args = new DictService_getCityById_args();
  args.cityId = cityId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DictServiceClient.prototype.recv_getCityById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DictService_getCityById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCityById failed: unknown result');
};
DictServiceClient.prototype.getGradeById = function(gradeId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGradeById(gradeId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGradeById(gradeId);
  }
};

DictServiceClient.prototype.send_getGradeById = function(gradeId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGradeById', Thrift.MessageType.CALL, this.seqid());
  var args = new DictService_getGradeById_args();
  args.gradeId = gradeId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DictServiceClient.prototype.recv_getGradeById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DictService_getGradeById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGradeById failed: unknown result');
};
DictServiceClient.prototype.getSubjectById = function(subjectId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSubjectById(subjectId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSubjectById(subjectId);
  }
};

DictServiceClient.prototype.send_getSubjectById = function(subjectId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSubjectById', Thrift.MessageType.CALL, this.seqid());
  var args = new DictService_getSubjectById_args();
  args.subjectId = subjectId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DictServiceClient.prototype.recv_getSubjectById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DictService_getSubjectById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSubjectById failed: unknown result');
};
DictServiceClient.prototype.getSchoolById = function(schoolId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSchoolById(schoolId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSchoolById(schoolId);
  }
};

DictServiceClient.prototype.send_getSchoolById = function(schoolId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSchoolById', Thrift.MessageType.CALL, this.seqid());
  var args = new DictService_getSchoolById_args();
  args.schoolId = schoolId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DictServiceClient.prototype.recv_getSchoolById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DictService_getSchoolById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSchoolById failed: unknown result');
};
DictServiceClient.prototype.getSubjectNamesByIds = function(ids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSubjectNamesByIds(ids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSubjectNamesByIds(ids);
  }
};

DictServiceClient.prototype.send_getSubjectNamesByIds = function(ids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSubjectNamesByIds', Thrift.MessageType.CALL, this.seqid());
  var args = new DictService_getSubjectNamesByIds_args();
  args.ids = ids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DictServiceClient.prototype.recv_getSubjectNamesByIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DictService_getSubjectNamesByIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSubjectNamesByIds failed: unknown result');
};
DictServiceClient.prototype.getGradeNamesByIds = function(ids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGradeNamesByIds(ids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGradeNamesByIds(ids);
  }
};

DictServiceClient.prototype.send_getGradeNamesByIds = function(ids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGradeNamesByIds', Thrift.MessageType.CALL, this.seqid());
  var args = new DictService_getGradeNamesByIds_args();
  args.ids = ids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DictServiceClient.prototype.recv_getGradeNamesByIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DictService_getGradeNamesByIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGradeNamesByIds failed: unknown result');
};
DictServiceClient.prototype.getCitySchoolMap = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCitySchoolMap();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCitySchoolMap();
  }
};

DictServiceClient.prototype.send_getCitySchoolMap = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCitySchoolMap', Thrift.MessageType.CALL, this.seqid());
  var args = new DictService_getCitySchoolMap_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DictServiceClient.prototype.recv_getCitySchoolMap = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DictService_getCitySchoolMap_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCitySchoolMap failed: unknown result');
};
DictServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
DictServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

DictServiceProcessor.prototype.process_getProvinceList = function(seqid, input, output) {
  var args = new DictService_getProvinceList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProvinceList.length === 0) {
    Q.fcall(this._handler.getProvinceList)
      .then(function(result) {
        var result = new DictService_getProvinceList_result({success: result});
        output.writeMessageBegin("getProvinceList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new DictService_getProvinceList_result(err);
        output.writeMessageBegin("getProvinceList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProvinceList( function (err, result) {
      var result = new DictService_getProvinceList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getProvinceList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DictServiceProcessor.prototype.process_getCityList = function(seqid, input, output) {
  var args = new DictService_getCityList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCityList.length === 0) {
    Q.fcall(this._handler.getCityList)
      .then(function(result) {
        var result = new DictService_getCityList_result({success: result});
        output.writeMessageBegin("getCityList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new DictService_getCityList_result(err);
        output.writeMessageBegin("getCityList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCityList( function (err, result) {
      var result = new DictService_getCityList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getCityList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DictServiceProcessor.prototype.process_getCityListByIds = function(seqid, input, output) {
  var args = new DictService_getCityListByIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCityListByIds.length === 1) {
    Q.fcall(this._handler.getCityListByIds, args.ids)
      .then(function(result) {
        var result = new DictService_getCityListByIds_result({success: result});
        output.writeMessageBegin("getCityListByIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new DictService_getCityListByIds_result(err);
        output.writeMessageBegin("getCityListByIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCityListByIds(args.ids,  function (err, result) {
      var result = new DictService_getCityListByIds_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getCityListByIds", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DictServiceProcessor.prototype.process_getSchoolListByIds = function(seqid, input, output) {
  var args = new DictService_getSchoolListByIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSchoolListByIds.length === 1) {
    Q.fcall(this._handler.getSchoolListByIds, args.ids)
      .then(function(result) {
        var result = new DictService_getSchoolListByIds_result({success: result});
        output.writeMessageBegin("getSchoolListByIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new DictService_getSchoolListByIds_result(err);
        output.writeMessageBegin("getSchoolListByIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSchoolListByIds(args.ids,  function (err, result) {
      var result = new DictService_getSchoolListByIds_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getSchoolListByIds", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DictServiceProcessor.prototype.process_getSchoolListByProvId = function(seqid, input, output) {
  var args = new DictService_getSchoolListByProvId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSchoolListByProvId.length === 1) {
    Q.fcall(this._handler.getSchoolListByProvId, args.provId)
      .then(function(result) {
        var result = new DictService_getSchoolListByProvId_result({success: result});
        output.writeMessageBegin("getSchoolListByProvId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new DictService_getSchoolListByProvId_result(err);
        output.writeMessageBegin("getSchoolListByProvId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSchoolListByProvId(args.provId,  function (err, result) {
      var result = new DictService_getSchoolListByProvId_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getSchoolListByProvId", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DictServiceProcessor.prototype.process_getGradeList = function(seqid, input, output) {
  var args = new DictService_getGradeList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGradeList.length === 0) {
    Q.fcall(this._handler.getGradeList)
      .then(function(result) {
        var result = new DictService_getGradeList_result({success: result});
        output.writeMessageBegin("getGradeList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new DictService_getGradeList_result(err);
        output.writeMessageBegin("getGradeList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGradeList( function (err, result) {
      var result = new DictService_getGradeList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getGradeList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DictServiceProcessor.prototype.process_getSubjectList = function(seqid, input, output) {
  var args = new DictService_getSubjectList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSubjectList.length === 0) {
    Q.fcall(this._handler.getSubjectList)
      .then(function(result) {
        var result = new DictService_getSubjectList_result({success: result});
        output.writeMessageBegin("getSubjectList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new DictService_getSubjectList_result(err);
        output.writeMessageBegin("getSubjectList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSubjectList( function (err, result) {
      var result = new DictService_getSubjectList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getSubjectList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DictServiceProcessor.prototype.process_getSubjectListByGrade = function(seqid, input, output) {
  var args = new DictService_getSubjectListByGrade_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSubjectListByGrade.length === 1) {
    Q.fcall(this._handler.getSubjectListByGrade, args.gradeId)
      .then(function(result) {
        var result = new DictService_getSubjectListByGrade_result({success: result});
        output.writeMessageBegin("getSubjectListByGrade", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new DictService_getSubjectListByGrade_result(err);
        output.writeMessageBegin("getSubjectListByGrade", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSubjectListByGrade(args.gradeId,  function (err, result) {
      var result = new DictService_getSubjectListByGrade_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getSubjectListByGrade", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DictServiceProcessor.prototype.process_getGradeSubjectList = function(seqid, input, output) {
  var args = new DictService_getGradeSubjectList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGradeSubjectList.length === 0) {
    Q.fcall(this._handler.getGradeSubjectList)
      .then(function(result) {
        var result = new DictService_getGradeSubjectList_result({success: result});
        output.writeMessageBegin("getGradeSubjectList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new DictService_getGradeSubjectList_result(err);
        output.writeMessageBegin("getGradeSubjectList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGradeSubjectList( function (err, result) {
      var result = new DictService_getGradeSubjectList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getGradeSubjectList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DictServiceProcessor.prototype.process_getCityById = function(seqid, input, output) {
  var args = new DictService_getCityById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCityById.length === 1) {
    Q.fcall(this._handler.getCityById, args.cityId)
      .then(function(result) {
        var result = new DictService_getCityById_result({success: result});
        output.writeMessageBegin("getCityById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new DictService_getCityById_result(err);
        output.writeMessageBegin("getCityById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCityById(args.cityId,  function (err, result) {
      var result = new DictService_getCityById_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getCityById", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DictServiceProcessor.prototype.process_getGradeById = function(seqid, input, output) {
  var args = new DictService_getGradeById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGradeById.length === 1) {
    Q.fcall(this._handler.getGradeById, args.gradeId)
      .then(function(result) {
        var result = new DictService_getGradeById_result({success: result});
        output.writeMessageBegin("getGradeById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new DictService_getGradeById_result(err);
        output.writeMessageBegin("getGradeById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGradeById(args.gradeId,  function (err, result) {
      var result = new DictService_getGradeById_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getGradeById", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DictServiceProcessor.prototype.process_getSubjectById = function(seqid, input, output) {
  var args = new DictService_getSubjectById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSubjectById.length === 1) {
    Q.fcall(this._handler.getSubjectById, args.subjectId)
      .then(function(result) {
        var result = new DictService_getSubjectById_result({success: result});
        output.writeMessageBegin("getSubjectById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new DictService_getSubjectById_result(err);
        output.writeMessageBegin("getSubjectById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSubjectById(args.subjectId,  function (err, result) {
      var result = new DictService_getSubjectById_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getSubjectById", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DictServiceProcessor.prototype.process_getSchoolById = function(seqid, input, output) {
  var args = new DictService_getSchoolById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSchoolById.length === 1) {
    Q.fcall(this._handler.getSchoolById, args.schoolId)
      .then(function(result) {
        var result = new DictService_getSchoolById_result({success: result});
        output.writeMessageBegin("getSchoolById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new DictService_getSchoolById_result(err);
        output.writeMessageBegin("getSchoolById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSchoolById(args.schoolId,  function (err, result) {
      var result = new DictService_getSchoolById_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getSchoolById", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DictServiceProcessor.prototype.process_getSubjectNamesByIds = function(seqid, input, output) {
  var args = new DictService_getSubjectNamesByIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSubjectNamesByIds.length === 1) {
    Q.fcall(this._handler.getSubjectNamesByIds, args.ids)
      .then(function(result) {
        var result = new DictService_getSubjectNamesByIds_result({success: result});
        output.writeMessageBegin("getSubjectNamesByIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new DictService_getSubjectNamesByIds_result(err);
        output.writeMessageBegin("getSubjectNamesByIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSubjectNamesByIds(args.ids,  function (err, result) {
      var result = new DictService_getSubjectNamesByIds_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getSubjectNamesByIds", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DictServiceProcessor.prototype.process_getGradeNamesByIds = function(seqid, input, output) {
  var args = new DictService_getGradeNamesByIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGradeNamesByIds.length === 1) {
    Q.fcall(this._handler.getGradeNamesByIds, args.ids)
      .then(function(result) {
        var result = new DictService_getGradeNamesByIds_result({success: result});
        output.writeMessageBegin("getGradeNamesByIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new DictService_getGradeNamesByIds_result(err);
        output.writeMessageBegin("getGradeNamesByIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGradeNamesByIds(args.ids,  function (err, result) {
      var result = new DictService_getGradeNamesByIds_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getGradeNamesByIds", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DictServiceProcessor.prototype.process_getCitySchoolMap = function(seqid, input, output) {
  var args = new DictService_getCitySchoolMap_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCitySchoolMap.length === 0) {
    Q.fcall(this._handler.getCitySchoolMap)
      .then(function(result) {
        var result = new DictService_getCitySchoolMap_result({success: result});
        output.writeMessageBegin("getCitySchoolMap", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new DictService_getCitySchoolMap_result(err);
        output.writeMessageBegin("getCitySchoolMap", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCitySchoolMap( function (err, result) {
      var result = new DictService_getCitySchoolMap_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getCitySchoolMap", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

