//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./user_types');
//HELPER FUNCTIONS AND STRUCTURES

UserService_getUserByNames_args = function(args) {
  this.names = null;
  if (args) {
    if (args.names !== undefined) {
      this.names = args.names;
    }
  }
};
UserService_getUserByNames_args.prototype = {};
UserService_getUserByNames_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.names = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.names.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserByNames_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserByNames_args');
  if (this.names !== null && this.names !== undefined) {
    output.writeFieldBegin('names', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.names.length);
    for (var iter7 in this.names)
    {
      if (this.names.hasOwnProperty(iter7))
      {
        iter7 = this.names[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_getUserByNames_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
UserService_getUserByNames_result.prototype = {};
UserService_getUserByNames_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserByNames_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserByNames_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_getUserByLoginName_args = function(args) {
  this.loginName = null;
  if (args) {
    if (args.loginName !== undefined) {
      this.loginName = args.loginName;
    }
  }
};
UserService_getUserByLoginName_args.prototype = {};
UserService_getUserByLoginName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.loginName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserByLoginName_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserByLoginName_args');
  if (this.loginName !== null && this.loginName !== undefined) {
    output.writeFieldBegin('loginName', Thrift.Type.STRING, 1);
    output.writeString(this.loginName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_getUserByLoginName_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
UserService_getUserByLoginName_result.prototype = {};
UserService_getUserByLoginName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserByLoginName_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserByLoginName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_getUserByMobile_args = function(args) {
  this.mobile = null;
  if (args) {
    if (args.mobile !== undefined) {
      this.mobile = args.mobile;
    }
  }
};
UserService_getUserByMobile_args.prototype = {};
UserService_getUserByMobile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserByMobile_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserByMobile_args');
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 1);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_getUserByMobile_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
UserService_getUserByMobile_result.prototype = {};
UserService_getUserByMobile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserByMobile_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserByMobile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_getUserByEmail_args = function(args) {
  this.email = null;
  if (args) {
    if (args.email !== undefined) {
      this.email = args.email;
    }
  }
};
UserService_getUserByEmail_args.prototype = {};
UserService_getUserByEmail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserByEmail_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserByEmail_args');
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 1);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_getUserByEmail_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
UserService_getUserByEmail_result.prototype = {};
UserService_getUserByEmail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserByEmail_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserByEmail_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_getUsersByQuery_args = function(args) {
  this.queryjson = null;
  if (args) {
    if (args.queryjson !== undefined) {
      this.queryjson = args.queryjson;
    }
  }
};
UserService_getUsersByQuery_args.prototype = {};
UserService_getUsersByQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queryjson = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUsersByQuery_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUsersByQuery_args');
  if (this.queryjson !== null && this.queryjson !== undefined) {
    output.writeFieldBegin('queryjson', Thrift.Type.STRING, 1);
    output.writeString(this.queryjson);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_getUsersByQuery_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
UserService_getUsersByQuery_result.prototype = {};
UserService_getUsersByQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUsersByQuery_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUsersByQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_getUsersByQueryWithOR_args = function(args) {
  this.queryjson = null;
  if (args) {
    if (args.queryjson !== undefined) {
      this.queryjson = args.queryjson;
    }
  }
};
UserService_getUsersByQueryWithOR_args.prototype = {};
UserService_getUsersByQueryWithOR_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queryjson = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUsersByQueryWithOR_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUsersByQueryWithOR_args');
  if (this.queryjson !== null && this.queryjson !== undefined) {
    output.writeFieldBegin('queryjson', Thrift.Type.STRING, 1);
    output.writeString(this.queryjson);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_getUsersByQueryWithOR_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
UserService_getUsersByQueryWithOR_result.prototype = {};
UserService_getUsersByQueryWithOR_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUsersByQueryWithOR_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUsersByQueryWithOR_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_save_args = function(args) {
  this.userjson = null;
  if (args) {
    if (args.userjson !== undefined) {
      this.userjson = args.userjson;
    }
  }
};
UserService_save_args.prototype = {};
UserService_save_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userjson = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_save_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_save_args');
  if (this.userjson !== null && this.userjson !== undefined) {
    output.writeFieldBegin('userjson', Thrift.Type.STRING, 1);
    output.writeString(this.userjson);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_save_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
UserService_save_result.prototype = {};
UserService_save_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_save_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_save_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_remove_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
UserService_remove_args.prototype = {};
UserService_remove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_remove_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_remove_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_remove_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
UserService_remove_result.prototype = {};
UserService_remove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_remove_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_remove_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_getUserByName_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
UserService_getUserByName_args.prototype = {};
UserService_getUserByName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserByName_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserByName_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_getUserByName_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
UserService_getUserByName_result.prototype = {};
UserService_getUserByName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserByName_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserByName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_getUserByDevId_args = function(args) {
  this.deviceid = null;
  if (args) {
    if (args.deviceid !== undefined) {
      this.deviceid = args.deviceid;
    }
  }
};
UserService_getUserByDevId_args.prototype = {};
UserService_getUserByDevId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deviceid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserByDevId_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserByDevId_args');
  if (this.deviceid !== null && this.deviceid !== undefined) {
    output.writeFieldBegin('deviceid', Thrift.Type.STRING, 1);
    output.writeString(this.deviceid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_getUserByDevId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
UserService_getUserByDevId_result.prototype = {};
UserService_getUserByDevId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserByDevId_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserByDevId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_getUserById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
UserService_getUserById_args.prototype = {};
UserService_getUserById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserById_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_getUserById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
UserService_getUserById_result.prototype = {};
UserService_getUserById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserById_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_getUserByIds_args = function(args) {
  this.ids = null;
  if (args) {
    if (args.ids !== undefined) {
      this.ids = args.ids;
    }
  }
};
UserService_getUserByIds_args.prototype = {};
UserService_getUserByIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.ids = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.ids.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserByIds_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserByIds_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter15 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter15))
      {
        iter15 = this.ids[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_getUserByIds_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
UserService_getUserByIds_result.prototype = {};
UserService_getUserByIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserByIds_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserByIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
UserServiceClient.prototype = {};
UserServiceClient.prototype.seqid = function() { return this._seqid; }
UserServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
UserServiceClient.prototype.getUserByNames = function(names, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserByNames(names);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserByNames(names);
  }
};

UserServiceClient.prototype.send_getUserByNames = function(names) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserByNames', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_getUserByNames_args();
  args.names = names;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_getUserByNames = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_getUserByNames_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserByNames failed: unknown result');
};
UserServiceClient.prototype.getUserByLoginName = function(loginName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserByLoginName(loginName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserByLoginName(loginName);
  }
};

UserServiceClient.prototype.send_getUserByLoginName = function(loginName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserByLoginName', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_getUserByLoginName_args();
  args.loginName = loginName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_getUserByLoginName = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_getUserByLoginName_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserByLoginName failed: unknown result');
};
UserServiceClient.prototype.getUserByMobile = function(mobile, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserByMobile(mobile);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserByMobile(mobile);
  }
};

UserServiceClient.prototype.send_getUserByMobile = function(mobile) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserByMobile', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_getUserByMobile_args();
  args.mobile = mobile;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_getUserByMobile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_getUserByMobile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserByMobile failed: unknown result');
};
UserServiceClient.prototype.getUserByEmail = function(email, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserByEmail(email);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserByEmail(email);
  }
};

UserServiceClient.prototype.send_getUserByEmail = function(email) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserByEmail', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_getUserByEmail_args();
  args.email = email;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_getUserByEmail = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_getUserByEmail_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserByEmail failed: unknown result');
};
UserServiceClient.prototype.getUsersByQuery = function(queryjson, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUsersByQuery(queryjson);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUsersByQuery(queryjson);
  }
};

UserServiceClient.prototype.send_getUsersByQuery = function(queryjson) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUsersByQuery', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_getUsersByQuery_args();
  args.queryjson = queryjson;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_getUsersByQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_getUsersByQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUsersByQuery failed: unknown result');
};
UserServiceClient.prototype.getUsersByQueryWithOR = function(queryjson, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUsersByQueryWithOR(queryjson);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUsersByQueryWithOR(queryjson);
  }
};

UserServiceClient.prototype.send_getUsersByQueryWithOR = function(queryjson) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUsersByQueryWithOR', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_getUsersByQueryWithOR_args();
  args.queryjson = queryjson;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_getUsersByQueryWithOR = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_getUsersByQueryWithOR_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUsersByQueryWithOR failed: unknown result');
};
UserServiceClient.prototype.save = function(userjson, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_save(userjson);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_save(userjson);
  }
};

UserServiceClient.prototype.send_save = function(userjson) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('save', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_save_args();
  args.userjson = userjson;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_save = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_save_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('save failed: unknown result');
};
UserServiceClient.prototype.remove = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_remove(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_remove(id);
  }
};

UserServiceClient.prototype.send_remove = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('remove', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_remove_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_remove = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_remove_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('remove failed: unknown result');
};
UserServiceClient.prototype.getUserByName = function(name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserByName(name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserByName(name);
  }
};

UserServiceClient.prototype.send_getUserByName = function(name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserByName', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_getUserByName_args();
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_getUserByName = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_getUserByName_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserByName failed: unknown result');
};
UserServiceClient.prototype.getUserByDevId = function(deviceid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserByDevId(deviceid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserByDevId(deviceid);
  }
};

UserServiceClient.prototype.send_getUserByDevId = function(deviceid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserByDevId', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_getUserByDevId_args();
  args.deviceid = deviceid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_getUserByDevId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_getUserByDevId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserByDevId failed: unknown result');
};
UserServiceClient.prototype.getUserById = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserById(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserById(id);
  }
};

UserServiceClient.prototype.send_getUserById = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserById', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_getUserById_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_getUserById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_getUserById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserById failed: unknown result');
};
UserServiceClient.prototype.getUserByIds = function(ids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserByIds(ids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserByIds(ids);
  }
};

UserServiceClient.prototype.send_getUserByIds = function(ids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserByIds', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_getUserByIds_args();
  args.ids = ids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_getUserByIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_getUserByIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserByIds failed: unknown result');
};
UserServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
UserServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

UserServiceProcessor.prototype.process_getUserByNames = function(seqid, input, output) {
  var args = new UserService_getUserByNames_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserByNames.length === 1) {
    Q.fcall(this._handler.getUserByNames, args.names)
      .then(function(result) {
        var result = new UserService_getUserByNames_result({success: result});
        output.writeMessageBegin("getUserByNames", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new UserService_getUserByNames_result(err);
        output.writeMessageBegin("getUserByNames", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserByNames(args.names,  function (err, result) {
      var result = new UserService_getUserByNames_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUserByNames", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_getUserByLoginName = function(seqid, input, output) {
  var args = new UserService_getUserByLoginName_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserByLoginName.length === 1) {
    Q.fcall(this._handler.getUserByLoginName, args.loginName)
      .then(function(result) {
        var result = new UserService_getUserByLoginName_result({success: result});
        output.writeMessageBegin("getUserByLoginName", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new UserService_getUserByLoginName_result(err);
        output.writeMessageBegin("getUserByLoginName", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserByLoginName(args.loginName,  function (err, result) {
      var result = new UserService_getUserByLoginName_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUserByLoginName", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_getUserByMobile = function(seqid, input, output) {
  var args = new UserService_getUserByMobile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserByMobile.length === 1) {
    Q.fcall(this._handler.getUserByMobile, args.mobile)
      .then(function(result) {
        var result = new UserService_getUserByMobile_result({success: result});
        output.writeMessageBegin("getUserByMobile", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new UserService_getUserByMobile_result(err);
        output.writeMessageBegin("getUserByMobile", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserByMobile(args.mobile,  function (err, result) {
      var result = new UserService_getUserByMobile_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUserByMobile", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_getUserByEmail = function(seqid, input, output) {
  var args = new UserService_getUserByEmail_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserByEmail.length === 1) {
    Q.fcall(this._handler.getUserByEmail, args.email)
      .then(function(result) {
        var result = new UserService_getUserByEmail_result({success: result});
        output.writeMessageBegin("getUserByEmail", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new UserService_getUserByEmail_result(err);
        output.writeMessageBegin("getUserByEmail", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserByEmail(args.email,  function (err, result) {
      var result = new UserService_getUserByEmail_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUserByEmail", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_getUsersByQuery = function(seqid, input, output) {
  var args = new UserService_getUsersByQuery_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUsersByQuery.length === 1) {
    Q.fcall(this._handler.getUsersByQuery, args.queryjson)
      .then(function(result) {
        var result = new UserService_getUsersByQuery_result({success: result});
        output.writeMessageBegin("getUsersByQuery", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new UserService_getUsersByQuery_result(err);
        output.writeMessageBegin("getUsersByQuery", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUsersByQuery(args.queryjson,  function (err, result) {
      var result = new UserService_getUsersByQuery_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUsersByQuery", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_getUsersByQueryWithOR = function(seqid, input, output) {
  var args = new UserService_getUsersByQueryWithOR_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUsersByQueryWithOR.length === 1) {
    Q.fcall(this._handler.getUsersByQueryWithOR, args.queryjson)
      .then(function(result) {
        var result = new UserService_getUsersByQueryWithOR_result({success: result});
        output.writeMessageBegin("getUsersByQueryWithOR", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new UserService_getUsersByQueryWithOR_result(err);
        output.writeMessageBegin("getUsersByQueryWithOR", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUsersByQueryWithOR(args.queryjson,  function (err, result) {
      var result = new UserService_getUsersByQueryWithOR_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUsersByQueryWithOR", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_save = function(seqid, input, output) {
  var args = new UserService_save_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.save.length === 1) {
    Q.fcall(this._handler.save, args.userjson)
      .then(function(result) {
        var result = new UserService_save_result({success: result});
        output.writeMessageBegin("save", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new UserService_save_result(err);
        output.writeMessageBegin("save", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.save(args.userjson,  function (err, result) {
      var result = new UserService_save_result((err != null ? err : {success: result}));
      output.writeMessageBegin("save", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_remove = function(seqid, input, output) {
  var args = new UserService_remove_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.remove.length === 1) {
    Q.fcall(this._handler.remove, args.id)
      .then(function(result) {
        var result = new UserService_remove_result({success: result});
        output.writeMessageBegin("remove", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new UserService_remove_result(err);
        output.writeMessageBegin("remove", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.remove(args.id,  function (err, result) {
      var result = new UserService_remove_result((err != null ? err : {success: result}));
      output.writeMessageBegin("remove", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_getUserByName = function(seqid, input, output) {
  var args = new UserService_getUserByName_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserByName.length === 1) {
    Q.fcall(this._handler.getUserByName, args.name)
      .then(function(result) {
        var result = new UserService_getUserByName_result({success: result});
        output.writeMessageBegin("getUserByName", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new UserService_getUserByName_result(err);
        output.writeMessageBegin("getUserByName", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserByName(args.name,  function (err, result) {
      var result = new UserService_getUserByName_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUserByName", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_getUserByDevId = function(seqid, input, output) {
  var args = new UserService_getUserByDevId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserByDevId.length === 1) {
    Q.fcall(this._handler.getUserByDevId, args.deviceid)
      .then(function(result) {
        var result = new UserService_getUserByDevId_result({success: result});
        output.writeMessageBegin("getUserByDevId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new UserService_getUserByDevId_result(err);
        output.writeMessageBegin("getUserByDevId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserByDevId(args.deviceid,  function (err, result) {
      var result = new UserService_getUserByDevId_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUserByDevId", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_getUserById = function(seqid, input, output) {
  var args = new UserService_getUserById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserById.length === 1) {
    Q.fcall(this._handler.getUserById, args.id)
      .then(function(result) {
        var result = new UserService_getUserById_result({success: result});
        output.writeMessageBegin("getUserById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new UserService_getUserById_result(err);
        output.writeMessageBegin("getUserById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserById(args.id,  function (err, result) {
      var result = new UserService_getUserById_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUserById", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_getUserByIds = function(seqid, input, output) {
  var args = new UserService_getUserByIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserByIds.length === 1) {
    Q.fcall(this._handler.getUserByIds, args.ids)
      .then(function(result) {
        var result = new UserService_getUserByIds_result({success: result});
        output.writeMessageBegin("getUserByIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new UserService_getUserByIds_result(err);
        output.writeMessageBegin("getUserByIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserByIds(args.ids,  function (err, result) {
      var result = new UserService_getUserByIds_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUserByIds", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

